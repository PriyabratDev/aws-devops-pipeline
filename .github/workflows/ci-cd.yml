name: DevOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  AWS_REGION: ap-south-2
  TERRAFORM_VERSION: 1.5.0

permissions:
  contents: read
  security-events: write

jobs:
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Run tfsec
      uses: aquasecurity/tfsec-action@v1.0.3
      with:
        working_directory: terraform
        
    - name: Build Docker image
      run: docker build -t test-app:latest -f docker/Dockerfile .
        
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: 'test-app:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  terraform-test:
    name: Terraform Tests
    runs-on: ubuntu-latest
    needs: security-scan
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Download Go module dependencies
      run: |
        cd tests
        go mod tidy

    - name: Run Terratest
      env:
        ALLOWED_IP_RANGE: ${{ secrets.ALLOWED_IP_RANGE }}
      run: |
        cd tests
        go test -v -timeout 30m

  terraform-deploy:
    name: Terraform Deploy
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-test]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}
        
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Terraform Init
      run: |
        cd terraform
        terraform init
        
    - name: Terraform Plan
      run: |
        cd terraform
        terraform plan -var="github_token=${{ secrets.GITHUB_TOKEN }}" -var="public_key=${{ secrets.SSH_PUBLIC_KEY }}"
        
    - name: Terraform Apply
      run: |
        cd terraform
        terraform apply -auto-approve -var="github_token=${{ secrets.GITHUB_TOKEN }}" -var="public_key=${{ secrets.SSH_PUBLIC_KEY }}"

  k8s-sealed-secrets:
    name: Deploy Sealed Secrets
    runs-on: ubuntu-latest
    needs: terraform-deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install kubeseal
      run: |
        wget https://github.com/bitnami-labs/sealed-secrets/releases/download/v0.24.0/kubeseal-0.24.0-linux-amd64.tar.gz
        tar -xvzf kubeseal-0.24.0-linux-amd64.tar.gz
        sudo install -m 755 kubeseal /usr/local/bin/kubeseal
        
    - name: Configure kubectl
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      run: |
        echo "$KUBE_CONFIG_DATA" | base64 --decode > kubeconfig
        export KUBECONFIG=$(pwd)/kubeconfig
        kubectl cluster-info
        
    - name: Create and apply sealed secrets
      run: |
        kubectl apply -f k8s/sealed-secret.yaml